pipeline {
    agent any

    environment {
        DOCKER_IMAGE = 'stevecobidex/messaging_app=web:latest'
        DOCKER_CREDENTIALS = 'fake-id'
    }

    stages {
        stage('Clone Repository') {
            steps {
                script {
                    def branchName = 'main'
                    git credentialsId: 'github', url: 'https://github.com/cobidex/messaging_app.git', branch: branchName

                    // Verify the branch
                    sh 'git branch'
                }
            }
        }

        stage('Set Up Python Environment') {
            steps {
                sh 'python3 -m venv venv'
                sh 'source venv/bin/activate'
                sh 'pip install -r messaging_app/requirements.txt'
            }
        }

        stage('Run Tests') {
            steps {
                sh 'source venv/bin/activate && pytest --junitxml=report.xml'
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // Make sure Dockerfile is present in the root of the repository
                    sh 'docker build -t $DOCKER_IMAGE .'
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    // Log in to Docker Hub
                    withCredentials([usernamePassword(credentialsId: DOCKER_CREDENTIALS, usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                        sh "echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin"
                    }

                    // Push the image to Docker Hub
                    sh 'docker push $DOCKER_IMAGE'
                }
            }
        }

        stage('Publish Test Report') {
            post {
                always {
                    junit 'report.xml'
                }
            }
        }
    }
}
